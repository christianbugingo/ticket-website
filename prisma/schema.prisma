// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  password    String
  name        String?
  phone       String?
  role        Role         @default(USER)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  companies   BusCompany[]
  bookings    Booking[]
}

enum Role {
  USER
  ADMIN
  BUS_OPERATOR
}

model BusCompany {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  logoUrl     String?   @db.VarChar(255)
  contact     String    @db.VarChar(100)
  email       String?    @unique
  description String?
  phone             String?   @db.VarChar(20)
  address           String?   @db.VarChar(255)
  licenseNumber     String?   @db.VarChar(50)
  status            String    @default("ACTIVE")
  contactPersonName String?   @db.VarChar(100)
  contactPersonPhone String?  @db.VarChar(20)
  owner       User?     @relation(fields: [ownerId], references: [id])
  ownerId     Int?
  buses       Bus[]
  routes      Route[]
  createdAt   DateTime  @default(now())
}

model Bus {
  id          Int       @id @default(autoincrement())
  plateNumber String    @unique @db.VarChar(20)
  capacity    Int
  model       String?
  company     BusCompany @relation(fields: [companyId], references: [id])
  companyId   Int
  schedules   Schedule[]
}

// NEW ROUTE MODEL ADDED HERE
model Route {
  id          Int        @id @default(autoincrement())
  origin      String
  destination String
  distance    Float?     // in kilometers
  duration    Float?     // in hours
  company     BusCompany @relation(fields: [companyId], references: [id])
  companyId   Int
  schedules   Schedule[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Schedule {
  id           Int       @id @default(autoincrement())
  departure    DateTime
  arrival      DateTime
  price        Float
  availableSeats Int
  bus          Bus       @relation(fields: [busId], references: [id])
  busId        Int
  route        Route?    @relation(fields: [routeId], references: [id])
  routeId      Int?
  bookings     Booking[]
}

model Booking {
  id          Int       @id @default(autoincrement())
  seatNumber  String
  status      BookingStatus @default(CONFIRMED)
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  schedule    Schedule  @relation(fields: [scheduleId], references: [id])
  scheduleId  Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}